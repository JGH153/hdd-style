.hdd-form {
  /************************
   *  Field
   ************************/

  &_field {
    // Variable containing '&' to jump to current parent inside a child class.
    $this: &;

    display: block;
    position: relative;
    margin-bottom: 2rem;
    text-align: left;

    &_label {
      // .is-p is font-properties, defined in typography.
      @extend .is-p;

      display: inline-block;
      margin-bottom: 0.2rem;
      font-weight: bold;
    }

    &_title {
      // .is-p is font-properties, defined in typography.
      @extend .is-p;
      display: block;
      margin-bottom: 1rem;
    }

    &_error,
    &_info {
      display: none;
      position: absolute;
      margin-top: 0.2rem;
      font-size: 0.8rem;

      &.is-active {
        display: block;
      }
    }

    &_error {
      > i {
        margin-right: 5px;
        color: var(--hdd-signal-red);
      }
    }

    &_info {
      color: var(--hdd-font-color);
    }

    &.is-line {
      > * {
        &:not(#{$this}_title):not(#{$this}_error) {
          margin-right: 1rem;
          float: left;
        }
      }
    }

    &.is-inline {
      display: inline-block;
    }
  }

  /************************
   *  Input
   ************************/

  &_input {
    // Variable containing '&' to jump to current parent inside a child class.
    $this: &;

    display: flex;
    box-sizing: border-box;

    align-items: center;
    padding: $form-input-padding;
    transition: border-color $medium-transition $transition-cubic;
    border: $form-input-border;
    border-radius: $form-input-border-radius;

    background: var(--hdd-white);

    &:not(.is-invalid):focus-within {
      @extend .hdd-form_input, .is-focus;
    }

    &.is-focus {
      border-color: var(--hdd-primary);

      #{$this}_icon,
      svg,
      i {
        opacity: 1;
        color: var(--hdd-primary);
      }
    }

    &.is-invalid {
      border-color: var(--hdd-signal-red);

      i {
        color: var(--hdd-signal-red);
      }
    }

    &.is-disabled {
      background: var(--hdd-grey-light);
      cursor: default;
    }

    &_field,
    > input,
    > textarea {
      // .is-p is font-properties, defined in typography
      @extend .is-p;

      width: 100%;
      padding: 0;
      border: none;
      background: transparent;

      @include placeholder() {
        color: var(--hdd-grey);
      }
    }

    > textarea {
      height: 16px;
      min-height: 16px;
      resize: vertical;
    }

    &_icon,
    > svg,
    > i {
      transition: color $medium-transition $transition-cubic, opacity $medium-transition $transition-cubic;
      opacity: 0.44;
      color: var(--hdd-black);
      font-size: font-size(h2);

      &:first-child {
        margin-right: $form-input-icon-margin;
      }

      &:last-child {
        margin-left: $form-input-icon-margin;
      }
    }
  }

  /************************
   *  Checkbox
   ************************/

  &_checkbox {
    // Variable containing '&' to jump to current parent inside a child class.
    $this: &;

    display: flex;
    align-items: center;
    margin-bottom: 0.75rem;
    cursor: pointer;

    // Creating placeholder to inject style into checkbox mutations.
    // We have to seperate the checkbox marked styling because of the checked state
    %checkbox-mark {
      position: relative;
      background-color: var(--hdd-primary);
      &::before {
        @extend .fal, .fa-check, :before;

        top: -1px;
        left: 50%;
        transform: translateX(-50%);

        color: var(--hdd-white);
        font-size: 0.75rem;
      }
    }

    &.is-checked {
      #{$this}_mark {
        @extend %checkbox-mark;
      }
    }

    &.is-invalid {
      input:checked ~ #{$this}_mark,
      #{$this}_mark {
        border-color: var(--hdd-signal-red);

        &::before {
          color: var(--hdd-signal-red);
        }
      }
    }

    // Need to hide the original checkbox
    input {
      display: none;

      &:checked ~ #{$this}_mark {
        @extend %checkbox-mark;
      }
    }

    // currently not in use
    .hdd-badge {
      margin-left: 0.5rem;
      float: right;
    }

    &_mark {
      display: inline-block;

      width: $form-checkbox-mark-size;
      height: $form-checkbox-mark-size;
      transition: background 0.3s $transition-cubic;
      border: $form-checkbox-mark-border;
      border-radius: $form-checkbox-mark-border-radius;
      background: var(--hdd-white);
    }

    &_label {
      flex-grow: 1;
      margin-left: 1rem;
    }
  }

  /************************
   *  Checkbox Toggle
   ************************/

  &_toggle {
    display: flex;
    align-items: center;
    position: relative;
    display: inline-block;
    width: 2rem;
    height: 1rem;
    margin-bottom: 0.75rem;

    // Hides inital html checkbox
    & input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      background-color: var(--hdd-white);
      transition: 0.4s;
      border: 1px solid var(--hdd-blue);
      border-radius: 2rem;
    }
    .slider:before {
      position: absolute;
      content: "";
      height: 0.7rem;
      width: 0.7rem;
      top: 0.15rem;
      right: 0.2rem;
      left: 0.2rem;
      bottom: 0.15rem;
      background-color: var(--hdd-blue);
      transition: 0.4s;
      border-radius: 50%;
    }

    input:checked + .slider {
      background-color: var(--hdd-blue);
    }

    input:checked + .slider:before {
      background-color: var(--hdd-white);
      @include transform(translateX(0.9rem));
    }
  }

  /************************
   *  Radiobutton
   ************************/

  &_radiobutton {
    // Variable containing '&' to jump to current parent inside a child class.
    $this: &;

    display: flex;
    align-items: center;
    margin-bottom: 0.75rem;
    cursor: pointer;

    // Creating placeholder to inject style into radiobutton mutations.
    %radiobutton-mark {
      position: relative;
      background-color: var(--hdd-primary);
      &:before {
        content: "";
        display: inline-block;
        padding: 5px;
        border: 2px solid var(--hdd-white);
        border-radius: 14px;
      }
    }

    &.is-checked {
      #{$this}_mark {
        @extend %radiobutton-mark;
      }
    }

    input {
      display: none;

      &:checked ~ #{$this}_mark {
        @extend %radiobutton-mark;
      }
    }

    &_mark {
      display: inline-block;

      width: $form-radiobutton-mark-size;
      height: $form-radiobutton-mark-size;
      transition: background 0.3s $transition-cubic;
      border: $form-radiobutton-mark-border;
      border-radius: $form-radiobutton-mark-border-radius;
      background: var(--hdd-white);
    }

    &_label {
      flex-grow: 1;
      margin-left: 1rem;
    }
  }

  /************************
   *  Select
   ************************/

  &_select {
    // Variable containing '&' to jump to current parent inside a child class.
    $this: &;

    display: flex;
    position: relative;
    align-items: center;

    width: 100%;

    transition: border-color $medium-transition $transition-cubic;
    border: $form-select-border;
    border-radius: $form-select-border-radius;

    background: var(--hdd-white);

    select {
      flex-grow: 1;
      padding: $form-select-padding;

      border: 0;
      background: none;

      -moz-appearance: none;
      -webkit-appearance: none;

      &::-ms-expand {
        display: none;
      }
    }

    &:focus-within {
      @extend .hdd-form_select, .is-focus;
    }

    &.is-focus {
      border-color: var(--hdd-primary);

      select {
        color: var(--hdd-primary);
      }

      #{$this}_icon,
      > svg,
      > i {
        opacity: 1;
        color: var(--hdd-primary);
      }
    }

    &.is-invalid {
      border-color: var(--hdd-signal-red);

      select {
        color: var(--hdd-signal-red);
      }

      i {
        opacity: 1;
        color: var(--hdd-signal-red);
      }
    }

    &.is-disabled {
      background: var(--hdd-grey-light);
      cursor: default;
    }

    &.has-icon {
      select {
        padding-left: calc(#{$form-input-icon-margin} + #{font-size(h2)} + #{$form-input-padding-left});
      }
    }

    &_icon,
    > svg,
    > i {
      position: absolute;
      transition: color $medium-transition $transition-cubic, opacity $medium-transition $transition-cubic;
      opacity: 0.44;
      color: var(--hdd-black);
      font-size: font-size(h2);

      &:first-child {
        left: $form-select-icon-margin;
      }

      &:last-child {
        right: $form-select-icon-margin;
      }
    }
  }
}
